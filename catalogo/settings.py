"""
Django settings for catalogo project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os, dj_database_url
from pathlib import Path
from decouple import config
from .cloudinaryUrlDecomposer import decompose
import cloudinary, cloudinary.uploader, cloudinary.api


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY      = os.environ.get('SECRET_KEY', config('SECRET_KEY'))
DATABASE_URL    = os.environ.get('DATABASE_URL', config('DATABASE_URL'))
ALLOWED_HOSTS   = [os.environ.get('ALLOWED_HOST', config('ALLOWED_HOST'))]

# CLOUD_NAME      = os.environ.get('CLOUD_NAME', config('CLOUD_NAME'))
# CLOUD_KEY       = os.environ.get('CLOUD_KEY', config('CLOUD_KEY'))
# CLOUD_SECRET    = os.environ.get('CLOUD_SECRET', config('CLOUD_SECRET'))
CLOUDINARY_URL   = os.environ.get('CLOUDINARY_URL', config('CLOUDINARY_URL'))

DISABLE_COLLECTSTATIC = 1

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

cloudinary_keys = decompose(CLOUDINARY_URL)
cloudinary.config( 
  cloud_name = cloudinary_keys['name'], 
  api_key = cloudinary_keys['key'], 
  api_secret = cloudinary_keys['secret'],
  secure=True,
)

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "whitenoise.runserver_nostatic",
    # 'cloudinary_storage',
    'cloudinary',
    'django.contrib.staticfiles',
    'djmoney.contrib.exchange',
    'conversation',
    'core',
    'dashboard',
    'item',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
}

ROOT_URLCONF = 'catalogo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'catalogo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASE_HOST    = os.environ.get('DATABASE_HOST', config('DATABASE_HOST'))
# DATABASE        = os.environ.get('DATABASE', config('DATABASE'))
# DATABASE_USER   = os.environ.get('DATABASE_USER', config('DATABASE_USER'))
# DATABASE_SECRET = os.environ.get('DATABASE_SECRET', config('DATABASE_SECRET'))

DATABASES = {
    'default': dj_database_url.config(default=DATABASE_URL)
    # {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'NAME': DATABASE,
    #     'USER': DATABASE_USER,
    #     'PASSWORD': DATABASE_SECRET,
    #     'HOST': DATABASE_HOST,
    #     'PORT': '5432',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL  = '/static/'
STATIC_ROOT  = BASE_DIR / 'static/'

MEDIA_URL  = CLOUDINARY_URL + '/'
MEDIA_ROOT = BASE_DIR / 'media/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
